nthread = 8
nthreadpair = 8
nthreadtb = 8
ppenalty_ex = 0
stacksize: 8192 kb
rescale = 1
Gap Penalty = -1.53, +0.00, +0.00



Making a distance matrix ..
    1 / 84 (thread    0)
done.

Constructing a UPGMA tree (efffree=0) ... 
    0 / 84   10 / 84   20 / 84   30 / 84   40 / 84   50 / 84   60 / 84   70 / 84   80 / 84
done.

Progressive alignment 1/2... 
STEP     1 / 83 (thread    0) fSTEP     2 / 83 (thread    2) fSTEP     4 / 83 (thread    4) fSTEP     7 / 83 (thread    7) fSTEP    10 / 83 (thread    7) fSTEP    11 / 83 (thread    4) fSTEP     5 / 83 (thread    5) fSTEP    12 / 83 (thread    7) fSTEP     3 / 83 (thread    3) fSTEP    14 / 83 (thread    7) fSTEP    13 / 83 (thread    2) fSTEP    15 / 83 (thread    4) fSTEP     6 / 83 (thread    6) fSTEP    18 / 83 (thread    3) fSTEP    16 / 83 (thread    7) fSTEP    19 / 83 (thread    4) fSTEP    21 / 83 (thread    7) fSTEP     8 / 83 (thread    1) fSTEP    23 / 83 (thread    2) fSTEP    24 / 83 (thread    7) dSTEP    25 / 83 (thread    2) fSTEP     9 / 83 (thread    0) fSTEP    26 / 83 (thread    1) dSTEP    17 / 83 (thread    5) fSTEP    30 / 83 (thread    7) dSTEP    31 / 83 (thread    7) fSTEP    20 / 83 (thread    3) dSTEP    22 / 83 (thread    6) dSTEP    35 / 83 (thread    6) dSTEP    27 / 83 (thread    2) dSTEP    36 / 83 (thread    4) dSTEP    28 / 83 (thread    1) dSTEP    38 / 83 (thread    2) fSTEP    29 / 83 (thread    0) dSTEP    40 / 83 (thread    6) fSTEP    41 / 83 (thread    0) dSTEP    32 / 83 (thread    7) dSTEP    42 / 83 (thread    6) dSTEP    33 / 83 (thread    5) dSTEP    39 / 83 (thread    1) dSTEP    45 / 83 (thread    0) dSTEP    34 / 83 (thread    3) dSTEP    48 / 83 (thread    3) dSTEP    37 / 83 (thread    4) dSTEP    50 / 83 (thread    4) dSTEP    43 / 83 (thread    2) dSTEP    47 / 83 (thread    5) dSTEP    52 / 83 (thread    2) dSTEP    46 / 83 (thread    6) d hSTEP    53 / 83 (thread    4) dSTEP    54 / 83 (thread    2) fSTEP    49 / 83 (thread    3) d hSTEP    57 / 83 (thread    1) d
Reallocating..done. *alloclen = 2184
STEP    44 / 83 (thread    7) dSTEP    58 / 83 (thread    3) dSTEP    51 / 83 (thread    0) d hSTEP    55 / 83 (thread    6) dSTEP    59 / 83 (thread    4) dSTEP    62 / 83 (thread    3) dSTEP    56 / 83 (thread    2) d hSTEP    61 / 83 (thread    1) d hSTEP    65 / 83 (thread    3) d hSTEP    66 / 83 (thread    1) d hSTEP    70 / 83 (thread    1) dSTEP    68 / 83 (thread    5) d hSTEP    71 / 83 (thread    7) fSTEP    60 / 83 (thread    4) dSTEP    72 / 83 (thread    1) d hSTEP    76 / 83 (thread    4) fSTEP    63 / 83 (thread    0) dSTEP    64 / 83 (thread    2) d hSTEP    67 / 83 (thread    3) d hSTEP    69 / 83 (thread    6) d hSTEP    73 / 83 (thread    7) d hSTEP    74 / 83 (thread    5) d hSTEP    75 / 83 (thread    1) d hSTEP    77 / 83 (thread    4) d hSTEP    78 / 83 (thread    0) d hSTEP    79 / 83 (thread    2) d hSTEP    80 / 83 (thread    3) d hSTEP    81 / 83 (thread    6) d hSTEP    82 / 83 (thread    7) d hSTEP    83 / 83 (thread    5) d h
done.

Making a distance matrix from msa.. 
    0 / 84 (thread    1)
done.

Constructing a UPGMA tree (efffree=1) ... 
    0 / 84   10 / 84   20 / 84   30 / 84   40 / 84   50 / 84   60 / 84   70 / 84   80 / 84
done.

Progressive alignment 2/2... 
STEP     1 / 83 (thread    0) fSTEP     2 / 83 (thread    2) fSTEP     4 / 83 (thread    3) fSTEP     7 / 83 (thread    7) fSTEP     8 / 83 (thread    5) fSTEP     9 / 83 (thread    7) fSTEP    10 / 83 (thread    7) fSTEP    11 / 83 (thread    7) fSTEP    12 / 83 (thread    7) fSTEP    14 / 83 (thread    0) fSTEP    15 / 83 (thread    7) fSTEP    16 / 83 (thread    0) fSTEP    17 / 83 (thread    7) fSTEP    19 / 83 (thread    2) fSTEP     3 / 83 (thread    1) fSTEP    20 / 83 (thread    7) fSTEP    21 / 83 (thread    2) fSTEP    22 / 83 (thread    3) fSTEP     5 / 83 (thread    4) fSTEP    26 / 83 (thread    4) fSTEP     6 / 83 (thread    6) fSTEP    29 / 83 (thread    6) dSTEP    13 / 83 (thread    5) fSTEP    18 / 83 (thread    0) fSTEP    31 / 83 (thread    5) dSTEP    23 / 83 (thread    2) dSTEP    24 / 83 (thread    7) dSTEP    33 / 83 (thread    2) dSTEP    35 / 83 (thread    2) fSTEP    36 / 83 (thread    2) dSTEP    25 / 83 (thread    3) dSTEP    38 / 83 (thread    7) fSTEP    27 / 83 (thread    1) dSTEP    28 / 83 (thread    4) dSTEP    42 / 83 (thread    4) dSTEP    30 / 83 (thread    6) dSTEP    43 / 83 (thread    6) fSTEP    32 / 83 (thread    0) dSTEP    44 / 83 (thread    6) fSTEP    45 / 83 (thread    6) dSTEP    34 / 83 (thread    5) dSTEP    48 / 83 (thread    6) dSTEP    49 / 83 (thread    6) fSTEP    50 / 83 (thread    5) dSTEP    37 / 83 (thread    2) dSTEP    51 / 83 (thread    6) fSTEP    39 / 83 (thread    7) dSTEP    53 / 83 (thread    6) dSTEP    54 / 83 (thread    5) dSTEP    55 / 83 (thread    7) dSTEP    40 / 83 (thread    3) dSTEP    57 / 83 (thread    7) dSTEP    58 / 83 (thread    3) dSTEP    41 / 83 (thread    1) d hSTEP    60 / 83 (thread    1) dSTEP    46 / 83 (thread    0) d hSTEP    56 / 83 (thread    6) dSTEP    62 / 83 (thread    0) fSTEP    47 / 83 (thread    4) d hSTEP    52 / 83 (thread    2) d hSTEP    61 / 83 (thread    5) dSTEP    59 / 83 (thread    3) d hSTEP    68 / 83 (thread    5) dSTEP    63 / 83 (thread    4) dSTEP    64 / 83 (thread    0) d hSTEP    65 / 83 (thread    7) dSTEP    66 / 83 (thread    1) d hSTEP    69 / 83 (thread    3) dSTEP    67 / 83 (thread    2) d hSTEP    71 / 83 (thread    0) d hSTEP    70 / 83 (thread    6) dSTEP    74 / 83 (thread    1) d hSTEP    77 / 83 (thread    0) d hSTEP    78 / 83 (thread    3) d hSTEP    72 / 83 (thread    4) d
Reallocating..done. *alloclen = 2356
STEP    73 / 83 (thread    5) dSTEP    75 / 83 (thread    2) dSTEP    76 / 83 (thread    7) d hSTEP    79 / 83 (thread    1) d hSTEP    80 / 83 (thread    0) d hSTEP    81 / 83 (thread    6) d hSTEP    82 / 83 (thread    3) d hSTEP    83 / 83 (thread    4) d h
done.

disttbfast (aa) Version 7.453
alg=A, model=BLOSUM62, 1.53, -0.00, -0.00, noshift, amax=0.0
8 thread(s)


Strategy:
 FFT-NS-2 (Fast but rough)
 Progressive method (guide trees were built 2 times.)

If unsure which option to use, try 'mafft --auto input > output'.
For more information, see 'mafft --help', 'mafft --man' and the mafft page.

The default gap scoring scheme has been changed in version 7.110 (2013 Oct).
It tends to insert more gaps into gap-rich regions than previous versions.
To disable this change, add the --leavegappyregion option.

