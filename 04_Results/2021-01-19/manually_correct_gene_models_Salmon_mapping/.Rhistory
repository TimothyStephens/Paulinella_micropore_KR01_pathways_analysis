c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:5]
unique(c(1,1,2,3,4,4))
length(unique(c(1,1,2,3,4,4)))
c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:length(unique(c(1,1,2,3,4,4)))]
c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:length(unique(c(1)))]
c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:length(unique(c(1,2)))]
library(ggplot2)
library(gridExtra)
args <- c("genes2plot.txt.norm_count_matrix.melted", "genes2plot.txt.norm_count_matrix.melted.plots.pdf", "genes2plot.txt")
# args <- c("test.melted", "test.melted.plots.pdf", "test.order2plot")
melted.expression.table.file <- args[1]
output.pdf.file <- args[2]
order2plot.file <- args[3]
plot.page.nrows <- 2
plot.page.ncols <- 2
## Open list of names and order to plot if avaliable.
if (is.na(order2plot.file)) {
names2plot <- unique(melted.expression.table$Name)
} else {
names2plot <- unique(readLines(order2plot.file))
names2plot <- names2plot[names2plot != ""]
}
plots <- list()
for (name in names2plot) {
tmp <- melted.expression.table[melted.expression.table$Name == name, ]
plots[[name]] <- ggplot(tmp, aes(x=Time, y=Expression, color=Condition)) +
geom_rect(aes(xmin=-Inf, xmax=0, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_rect(aes(xmin=12, xmax=24, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_rect(aes(xmin=36, xmax=43, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_point(alpha=0.7) +
stat_summary(fun = mean, geom="line") + theme_light() +
scale_color_manual(values=c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:unique(tmp$Condition)]) +
theme_linedraw() +
theme(legend.position = "bottom",
legend.title = element_text(family = "sans", size=6),
legend.text = element_text(family = "sans", size=6),
plot.title = element_text(family = "sans", size=8, face="bold"),
axis.text.x = element_text(family = "sans", size=6),
axis.text.y = element_text(family = "sans", size=6),
axis.title.x = element_text(family = "sans", size=8, face="bold"),
axis.title.y = element_text(family = "sans", size=8, face="bold")) +
ggtitle(name[[1]])
}
melted.expression.table <- read.table(melted.expression.table.file, header = T, sep = '\t')
# args <- c("test.melted", "test.melted.plots.pdf", "test.order2plot")
melted.expression.table.file <- args[1]
melted.expression.table <- read.table(melted.expression.table.file, header = T, sep = '\t')
plots <- list()
for (name in names2plot) {
tmp <- melted.expression.table[melted.expression.table$Name == name, ]
plots[[name]] <- ggplot(tmp, aes(x=Time, y=Expression, color=Condition)) +
geom_rect(aes(xmin=-Inf, xmax=0, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_rect(aes(xmin=12, xmax=24, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_rect(aes(xmin=36, xmax=43, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_point(alpha=0.7) +
stat_summary(fun = mean, geom="line") + theme_light() +
scale_color_manual(values=c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:unique(tmp$Condition)]) +
theme_linedraw() +
theme(legend.position = "bottom",
legend.title = element_text(family = "sans", size=6),
legend.text = element_text(family = "sans", size=6),
plot.title = element_text(family = "sans", size=8, face="bold"),
axis.text.x = element_text(family = "sans", size=6),
axis.text.y = element_text(family = "sans", size=6),
axis.title.x = element_text(family = "sans", size=8, face="bold"),
axis.title.y = element_text(family = "sans", size=8, face="bold")) +
ggtitle(name[[1]])
}
melted.expression.table[melted.expression.table$Name == name, ]
name
names2plot <- unique(readLines(order2plot.file))
names2plot <- names2plot[names2plot != ""]
names2plot
source('~/OneDrive - Rutgers University/cygwin_data/projects/0011_Paulinella_micropora_KR01_KEGG_pathway_analysis/04_Results/2021-01-19/manually_correct_gene_models_Salmon_mapping/plot_time_course_expression_data.R', echo=TRUE)
args <- c("genes2plot.txt.norm_count_matrix.melted", "genes2plot.txt.norm_count_matrix.melted.plots.pdf", "t")
# args <- c("test.melted", "test.melted.plots.pdf", "test.order2plot")
melted.expression.table.file <- args[1]
output.pdf.file <- args[2]
order2plot.file <- args[3]
plot.page.nrows <- 2
plot.page.ncols <- 2
melted.expression.table <- read.table(melted.expression.table.file, header = T, sep = '\t')
## Open list of names and order to plot if avaliable.
if (is.na(order2plot.file)) {
names2plot <- unique(melted.expression.table$Name)
} else {
names2plot <- unique(readLines(order2plot.file))
names2plot <- names2plot[names2plot != ""]
}
plots <- list()
for (name in names2plot) {
tmp <- melted.expression.table[melted.expression.table$Name == name, ]
plots[[name]] <- ggplot(tmp, aes(x=Time, y=Expression, color=Condition)) +
geom_rect(aes(xmin=-Inf, xmax=0, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_rect(aes(xmin=12, xmax=24, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_rect(aes(xmin=36, xmax=43, ymin=-Inf, ymax=Inf), fill = "grey70", color = NA, alpha = 0.01) +
geom_point(alpha=0.7) +
stat_summary(fun = mean, geom="line") + theme_light() +
scale_color_manual(values=c("#a6cee3", "#1f78b4", "#b2df8a", "#33a02c", "#fb9a99", "#e31a1c", "#fdbf6f", "#ff7f00", "#cab2d6", "#6a3d9a", "#ffff99", "#b15928")[1:unique(tmp$Condition)]) +
theme_linedraw() +
theme(legend.position = "bottom",
legend.title = element_text(family = "sans", size=6),
legend.text = element_text(family = "sans", size=6),
plot.title = element_text(family = "sans", size=8, face="bold"),
axis.text.x = element_text(family = "sans", size=6),
axis.text.y = element_text(family = "sans", size=6),
axis.title.x = element_text(family = "sans", size=8, face="bold"),
axis.title.y = element_text(family = "sans", size=8, face="bold")) +
ggtitle(name[[1]])
}
warnings()
tmp
name
melted.expression.table$Name
name
melted.expression.table$Name == name
melted.expression.table[melted.expression.table$Name == name, ]
name
ml <- marrangeGrob(plots, nrow=plot.page.nrows, ncol=plot.page.ncols, layout_matrix=matrix(1:(plot.page.nrows*plot.page.ncols), plot.page.nrows, plot.page.ncols, TRUE))
